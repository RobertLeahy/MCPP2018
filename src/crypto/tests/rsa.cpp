#include <mcpp/crypto/rsa.hpp>

#include <mcpp/crypto/bignum.hpp>
#include <openssl/rsa.h>
#include <openssl/x509.h>

#include <catch2/catch.hpp>

namespace mcpp::crypto::tests {
namespace {

TEST_CASE("d2i_RSA_PUBKEY",
          "[mcpp][crypto][rsa]")
{
  //  https://gist.github.com/ammaraskar/9a8f8851941eae8b6191d0c461c958ea
  unsigned char der[] = {0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
                         0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xaa, 0x18, 0xab,
                         0xa4, 0x3b, 0x50, 0xde, 0xef, 0x38, 0x59, 0x8f, 0xaf, 0x87, 0xd2, 0xab, 0x63, 0x4e, 0x45, 0x71,
                         0xc1, 0x30, 0xa9, 0xbc, 0xa7, 0xb8, 0x78, 0x26, 0x74, 0x14, 0xfa, 0xab, 0x8b, 0x47, 0x1b, 0xd8,
                         0x96, 0x5f, 0x5c, 0x9f, 0xc3, 0x81, 0x84, 0x85, 0xea, 0xf5, 0x29, 0xc2, 0x62, 0x46, 0xf3, 0x05,
                         0x50, 0x64, 0xa8, 0xde, 0x19, 0xc8, 0xc3, 0x38, 0xbe, 0x54, 0x96, 0xcb, 0xae, 0xb0, 0x59, 0xdc,
                         0x0b, 0x35, 0x81, 0x43, 0xb4, 0x4a, 0x35, 0x44, 0x9e, 0xb2, 0x64, 0x11, 0x31, 0x21, 0xa4, 0x55,
                         0xbd, 0x7f, 0xde, 0x3f, 0xac, 0x91, 0x9e, 0x94, 0xb5, 0x6f, 0xb9, 0xbb, 0x4f, 0x65, 0x1c, 0xdb,
                         0x23, 0xea, 0xd4, 0x39, 0xd6, 0xcd, 0x52, 0x3e, 0xb0, 0x81, 0x91, 0xe7, 0x5b, 0x35, 0xfd, 0x13,
                         0xa7, 0x41, 0x9b, 0x30, 0x90, 0xf2, 0x47, 0x87, 0xbd, 0x4f, 0x4e, 0x19, 0x67, 0x02, 0x03, 0x01,
                         0x00, 0x01};
  const unsigned char* ptr = der;
  auto result = ::d2i_RSA_PUBKEY(nullptr,
                                 &ptr,
                                 sizeof(der));
  REQUIRE(result);
  crypto::rsa rsa(result);
  CHECK(ptr == (der + sizeof(der)));
}

TEST_CASE("RSA_generate_key_ex",
          "[mcpp][crypto][rsa]")
{
  bignum bn;
  BN_zero(bn.native_handle());
  int result = ::BN_add_word(bn.native_handle(),
                             3);
  REQUIRE(result);
  crypto::rsa rsa;
  result = ::RSA_generate_key_ex(rsa.native_handle(),
                                 2048,
                                 bn.native_handle(),
                                 nullptr);
  REQUIRE(result);
}

}
}
